extends: 
  - ./zalando.oas.rules.yml
  - [spectral:oas, recommended]
  - https://unpkg.com/@stoplight/spectral-documentation/dist/ruleset.mjs

documentationUrl: https://refactored-chainsaw-8qmo7ge.pages.github.io/

functions:
  - is-api-info-json-schema
  - has-required-problem-details-error-responses

functionsDir: dist/functions

rules:
  oas3-api-servers: off
  must-have-info-x-api-id: off
  must-always-return-json-objects-as-top-level-data-structures: warn
  should-not-use-api-as-base-path: off

  # MUST Properties must use lower camel case.
  # => /docs/spectral-rules/must/must-use-camel-case-for-property-names.md

  must-use-snake-case-for-property-names: off
  must-use-camel-case-for-property-names:
    given: $.paths.*.*[responses,requestBody]..content..schema..properties.*~
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
    recommended: true
    description: Properties must use lower camel case.
    message: Properties must use lower camel case.

  # MUST Query parameters must use lower camel case.
  # => /docs/spectral-rules/must/must-use-camel-case-for-query-parameters.md

  must-use-snake-case-for-query-parameters: off
  must-use-camel-case-for-query-parameters:
    given: $.paths.*.*.parameters[?(@ && @.in=='query')].name
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
    recommended: true
    description: Query parameters must use lower camel case.
    message: Query parameters must use lower camel case.

  # MUST The `info` object must have an `x-audience` that matches at least one of these values: company-internal, partner-external, premium-external or public-external.
  # => /docs/spectral-rules/must/must-have-info-api-audience.md

  must-provide-api-audience: off
  must-have-info-api-audience:
    given: $.info
    severity: error
    then:
      - function: enumeration
        field: x-audience
        functionOptions:
          values:
            - company-internal
            - partner-external
            - premium-external
            - public-external
      - function: defined
        field: x-audience
    recommended: true
    description: 'The `info` object must have an `x-audience` that matches at least one of these values: company-internal, partner-external, premium-external or public-external.'
    message: Missing or wrong `info.x-audience`, {{error}}.

  # MUST Path must start with a slash and must not end with a slash.
  # => /docs/spectral-rules/must/must-use-normalized-paths.md

  must-use-normalized-paths-without-trailing-slash: off
  must-use-normalized-paths:
    given: $.paths.*~
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^\/($|[^\/].*[^\/]$)
    description: "Path must start with a slash and must not end with a slash (except root path '/')"
    message: "Path must start with a slash and must not end with a slash (except root path '/')"

  # SHOULD APIs SHOULD have a root path (`/`) defined.
  # => /docs/spectral-rules/must/should-define-api-root.md

  should-define-api-root:
    given: $.paths
    severity: warn
    then:
      field: /
      function: truthy
    recommended: true
    description: Good documentation is always welcome, but API consumers should be able to get a pretty long way through interaction with the API alone. They should at least know they're looking at the right place instead of getting a 404 or random 500 error as is common in some APIs.
    message: APIs SHOULD have a root path (`/`) defined.

  # MUST Root path must define a 200 response..
  # => /docs/spectral-rules/must/must-return-200-for-api-root.md

  must-return-200-for-api-root:
    given: $.paths["/"].*.responses
    severity: error
    then:
      field: '200'
      function: truthy
    recommended: true
    description: 'Root path must define a 200 response.'
    message: 'Root path must define a 200 response.'

  # MUST `ApiInfo` schema must include this set of minimal required properties and validations.
  # => /docs/spectral-rules/must/must-use-valid-version-info-schema.md

  must-use-valid-version-info-schema:
    given: $.paths["/"].*.responses["200"].content["application/json"]
    severity: error
    then:
      function: is-api-info-json-schema
      field: schema
    recommended: true
    description: '`ApiInfo` schema must include this set of minimal required properties and validations.'
    message: '{{error}}'

  # MUST The `info` object must have an `x-value-chain` that matches at least one of these values: prevent, detect, analyse, respond, cross-cutting or enabling.
  # => /docs/spectral-rules/must/must-have-info-value-chain.md

  must-have-info-value-chain:
    given: $.info
    severity: error
    then:
      - function: enumeration
        field: x-value-chain
        functionOptions:
          values:
            - prevent
            - detect
            - analyse
            - respond
            - cross-cutting
            - enabling
      - function: defined
        field: x-value-chain
    recommended: true
    description: 'The `info` object must have an `x-value-chain` that matches at least one of these values: prevent, detect, analyse, respond, cross-cutting or enabling.'
    message: "Missing or wrong `info.x-value-chain`, {{error}}."

  # MUST ALL requests MUST go through `https` protocol only
  # => /docs/spectral-rules/must/must-use-https-protocol-only.md

  must-use-https-protocol-only:
    given: $.servers..url
    severity: error
    then:
      function: pattern
      functionOptions:
        match: "/^https:/"
    recommended: true
    description: ALL requests MUST go through `https` protocol only
    message: Servers MUST be `https` and no other protocol is allowed.

  # MUST APIs MUST NOT use `HTTP` Basic Authentication.
  # => /docs/spectral-rules/must/must-not-use-http-basic-authentication.md

  must-not-use-http-basic-authentication:
    given: $.components.securitySchemes[*]
    severity: error
    then:
      field: scheme
      function: pattern
      functionOptions:
        notMatch: basic
    recommended: true
    message: APIs MUST NOT use `HTTP` Basic Authentication.
    description: >-
      HTTP Basic is an inherently insecure way to pass credentials to the API. They're placed in the URL in base64 which can be decrypted easily. Even if you're using a token, there are far better ways to handle passing tokens to an API which are less likely to leak.


      See OWASP advice. https://owasp.org/API-Security/editions/2019/en/0xa2-broken-user-authentication/

  # SHOULD Every request SHOULD support `application/json` media type.
  # => /docs/spectral-rules/should/should-support-application-json-content-request-body.md

  should-support-application-json-content-request-body:
    given: $.paths[*][*].requestBody.content
    severity: warn
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          properties:
            application/json: true
          required:
            - application/json
    recommended: true
    description: Every request SHOULD support at least one `application/json` content type
    message: Every request SHOULD support at least one `application/json` content type.

  # MUST A GET request MUST NOT accept a request body.
  # => /docs/spectral-rules/must/must-not-define-request-body-for-get-requests.md

  must-not-define-request-body-for-get-requests:
    given: $.paths..get.requestBody
    severity: error
    then:
      function: undefined
    recommended: true
    description: Defining a request body on a HTTP GET is in some implementations, but is increasingly frowned upon due to the confusion that comes from unspecified behavior in the HTTP specification.
    message: A GET request MUST NOT accept a request body.

  # MUST All APIs MUST have a security scheme defined.
  # => /docs/spectral-rules/must/must-define-security-schemes.md

  must-define-security-schemes:
    given: $..components
    severity: error
    then:
      field: securitySchemes
      function: truthy
    recommended: true
    description: This API definition does not have any security scheme defined, which means the entire API is open to the public. That's probably not what you want, even if all the data is read-only. Setting lower rate limits for the public and letting known consumers use more resources is a handy path to monetization, and helps know who your power users are when changes need feedback or migration, even if not just good practice.
    message: All APIs MUST have a security scheme defined.

  # SHOULD `201 Created` responses to `POST` methods SHOULD have a `Location` header identifying the location of the newly created resource.
  # => /docs/spectral-rules/should/should-have-location-header-in-201-response.md

  should-have-location-header-in-201-response:
    given: $.paths..post.responses["201"]
    severity: warn
    then:
      function: schema
      field: headers
      functionOptions:
        allErrors: true
        schema:
          type: object
          properties:
            Location:
              type: object
              properties:
                description:
                  type: string
                  description: 'The URL of the created resource.'
                schema:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [string]
                    format:
                      type: string
                      enum: [uri]
                    example:
                      type: string
                  required:
                    - type
                    - format
                    - example
              required:
                - description
                - schema
          required:
            - Location
    recommended: true
    description: '`201 Created` responses to `POST` methods SHOULD have a `Location` header identifying the location of the newly created resource.'
    message: '{{error}}'

  # MUST Each operation MUST define 400, 404, and 500 responses using `application/problem+json` with examples.
  # => /docs/spectral-rules/must/must-define-critical-problem-responses.md

  must-define-critical-problem-responses:
    description: "Operations must define 400, 404, 500 with examples and application/problem+json"
    message: "{{error}}"
    severity: warn
    given: $.paths[*][*]
    then:
      function: has-required-problem-details-error-responses
      functionOptions:
        mode: 'critical'

  # MUST Operations with their own non-empty `security` MUST define 401 and 403 responses using `application/problem+json` with examples.
  # => /docs/spectral-rules/must/must-define-security-problem-responses.md

  must-define-security-problem-responses:
    description: "Operations with their own non-empty 'security' MUST define 401 and 403"
    message: "{{error}}"
    severity: warn
    given: $.paths[*][*]
    then:
      function: has-required-problem-details-error-responses
      functionOptions:
        mode: 'explicit-security'

  # SHOULD include `x-contains-sensitive-data` boolean in the `info` object to indicate presence of sensitive data like PII or PHI.
  # => /docs/spectral-rules/should/should-have-info-x-contains-sensitive-data.md

  should-have-info-x-contains-sensitive-data:
    given: $.info
    severity: warn
    then:
      - function: defined
        field: x-contains-sensitive-data
      - function: schema
        field: x-contains-sensitive-data
        functionOptions:
          schema:
            type: boolean
    recommended: true
    description: 'The `info` object SHOULD contain `x-contains-sensitive-data` to indicate presence of sensitive data such as PII or PHI.'
    message: "Missing or wrong 'info.x-contains-sensitive-data', should be 'boolean'."
