openapi: '3.0.4'
info:
  title: Test Results Api
  version: '1.0.0'
  description: This API is for obtaining or submitting test results.
  x-audience: public-external
  x-contains-sensitive-data: false
  x-value-chain: detect
  contact:
    name: Result API contact
    url: https://url-to-api-team-confluence-support-page
    email: result@api.ukhsa.gov.uk
servers:
  - url: https://azgw.api.ukhsa.gov.uk/detect/testing/v1
    description: UKHSA Test Results API Server.
tags:
  - name: API Meta Information
    description: Operations related to API information.
  - name: Test Results
    description: Operations related to test results.

paths:
  /:
    get:
      summary: Get API information.
      description: Get API information.
      operationId: getApiInfo
      tags:
        - API Meta Information
      responses:
        '200':
          description: This response returns a information about the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /results:
    get:
      summary: List all test results
      description: List all test results.
      operationId: getResults
      tags:
        - Test Results
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/sortParam'
        - in: query
          name: type
          required: false
          description: The type of test to filter by.
          schema:
            $ref: '#/components/schemas/RHSFilterExpression'
          example: eq:Lateral Flow Test
        - in: query
          name: result
          required: false
          description: The result type of test to filter by.
          schema:
            type: string
            x-extensible-enum:
              - POSITIVE
              - NEGATIVE
              - UNREADABLE
          examples:
            positive:
              value: POSITIVE
            negative:
              value: NEGATIVE
            unreadable:
              value: UNREADABLE
      responses:
        '200':
          description: This response returns a list of all test results that match the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Submit a new test result
      description: Submit a new test result.
      operationId: submitResult
      tags:
        - Test Results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultRequest'
            examples:
              example1:
                value:
                  nhsNumber: '4857773456'
                  type: Lateral Flow Test
                  result: POSITIVE
              example2:
                value:
                  nhsNumber: '485 777 3456'
                  type: Lateral Flow Test
                  result: NEGATIVE
              example3:
                value:
                  nhsNumber: '485-777-3456'
                  type: Lateral Flow Test
                  result: UNREADABLE
        description: The test result to be submitted.
      responses:
        '201':
          description: This response returns a JSON object containing the test result data.
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /results/{resultId}:
    get:
      summary: Get a specific test result
      description: Get a specific test result.
      operationId: getResult
      tags:
        - Test Results
      parameters:
        - name: resultId
          in: path
          required: true
          description: The id of the test result to retrieve.
          schema:
            type: string
            format: uuid
            example: 'de750613-ef3c-4f5d-8148-10308b91896c'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultResponse'
          description: This response returns a JSON object containing the test result data.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

components:
  securitySchemes:
    oAuth:
      type: oauth2
      description: This API uses OAuth 2 with the authorization code flow. [More info](https://oauth.net/2/grant-types/authorization-code/)
      flows:
        authorizationCode:
          authorizationUrl: https://domain.test/api/oauth/dialog
          tokenUrl: https://domain.test/api/oauth/token
          refreshUrl: https://domain.test/api/oauth/token
          scopes:
            tests:read: read test results
            tests:write: submit test results
  
  schemas:
    ResultRequest:
      type: object
      description: Schema for submitting a test result.
      properties:
        nhsNumber:
          type: string
          pattern: '^\d{3}(?:-| )?\d{3}(?:-| )?\d{4}$'
          example: '4857773456'
        type:
          type: string
          example: Lateral Flow Test
        result:
          type: string
          x-extensible-enum:
            - POSITIVE
            - NEGATIVE
            - UNREADABLE
          example: POSITIVE
      required:
        - nhsNumber
        - type
        - result

    ResultResponse:
      type: object
      description: Schema for a test result response.
      properties:
        resultId:
          type: string
          format: uuid
          description: The id of the test result
          example: 'de750613-ef3c-4f5d-8148-10308b91896c'
        nhsNumber:
          type: string
          description: The NHS number of the patient
          example: '4857773456'
        type:
          type: string
          description: The type of test
          example: 'Lateral Flow Test'
        result:
          type: string
          description: The result of the test
          x-extensible-enum:
            - POSITIVE
            - NEGATIVE
            - UNREADABLE
          example: POSITIVE
      required:
        - resultId
        - nhsNumber
        - type
        - result

    ResultsResponse:
      type: object
      description: Schema for returning test results with pagination.
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ResultResponse'
        metadata:
          $ref: '#/components/schemas/ListPagedMetadata'
      required:
        - results
        - metadata

    ListPagedMetadata:
      type: object
      description: This object provides paging metadata collection resources.
      properties:
        total:
          type: integer
          format: int32
          description: Total number of results.
          example: 200
        offset:
          type: integer
          format: int32
          description: The offset used for the current results set.
          example: 1
        cursor:
          type: string
          description: The pointer to the position in the dataset to start the next page.
          example: abc123
        limit:
          type: integer
          format: int32
          description: The maximum number of items returned.
          example: 20
      required:
        - total
        - limit

    ApiInfo:
      type: object
      description: Schema for detailing API information.
      properties:
        name:
          type: string
          description: The name of the API.
          example: Test Results API
        version:
          type: string
          pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
          description: The version of the API.
          example: 1.0.0
        status:
          type: string
          description: The status of the API version.
          x-extensible-enum:
            - ALPHA
            - BETA
            - LIVE
            - DEPRECATED
          example: LIVE
        releaseDate:
          type: string
          format: date
          description: The release date of this API version.
          example: 2025-02-26
        documentation:
          type: string
          format: uri
          description: A URL to the API documentation.
          example: https://developer.ukhsa.gov.uk/namespace/product/v1/docs
        releaseNotes:
          type: string
          format: uri
          description: A URL to the API release notes.
          example: https://developer.ukhsa.gov.uk/namespace/product/v1/releaseNotes
      required:
        - name
        - version
        - status
        - releaseDate
        - documentation
        - releaseNotes

    ProblemDetails:
      type: object
      description: Schema for detailed problem information.
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type.
          format: uri-reference
          maxLength: 1024
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          format: int32
          minimum: 100
          maximum: 599
        title:
          type: string
          description: A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization.
          maxLength: 1024
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          maxLength: 4096
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
          maxLength: 1024
        traceId:
          type: string
          description: A unique identifier when an error occurs while using a the API.
          maxLength: 1024
        errors:
          $ref: '#/components/schemas/Errors'
        code:
          type: string
          description: An API specific error code aiding the provider team understand the error based on their own potential taxonomy or registry.
          maxLength: 50
      required:
        - type
        - status
        - title
        - detail
        - instance

    Errors:
      type: array
      description: An array of error details to accompany a problem details response.
      maxItems: 1000
      items:
        $ref: '#/components/schemas/ErrorDetail'

    ErrorDetail:
      type: object
      description: An object to provide explicit details on a problem towards an API consumer.
      properties:
        detail:
          type: string
          description: A granular description on the specific error related to a body property, query parameter, path parameters, and/or header.
          maxLength: 4096
        pointer:
          type: string
          description: A JSON Pointer to a specific request body property that is the source of error.
          maxLength: 1024
        parameter:
          type: string
          description: The name of the query or path parameter that is the source of error.
          maxLength: 1024
        header:
          type: string
          description: The name of the header that is the source of error.
          maxLength: 1024
        code:
          type: string
          description: A string containing additional provider specific codes to identify the error context.
          maxLength: 50
      required:
        - detail

    RHSFilterExpression:
      type: string
      pattern: '^(eq|ne|gt|lt|gte|lte|in|nin|like|ilike)?:?([^:&]+)$'
      description: "RHS filter expression in format '{operation}:{value}'."
      example: 'eq:Lateral%20Flow%20Test'

  parameters:
    offsetParam:
      in: query
      name: offset
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
      example: 10

    limitParam:
      in: query
      name: limit
      description: The maximum number of items to return.
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 20
        maximum: 100
      example: 20

    sortParam:
      in: query
      name: sort
      description: How to sort the results.
      schema:
        type: string
        pattern: ^[a-z]+(?:[A-Z][a-z]+)+\|(?:asc|desc)(?:,[a-z]+(?:[A-Z][a-z]+)*\|(?:asc|desc))*$
      examples:
        sortBySingleField:
          value: nhsNumber|asc
          summary: Sort by a single field
        sortByMultipleField:
          value: nhsNumber|asc,type|desc
          summary: Sort by multiple fields

  headers:
    Location:
      description: The URL of the created test result.
      schema:
        type: string
        format: uri
        example: https://azgw.api.ukhsa.gov.uk/detect/testing/v1/results/de750613-ef3c-4f5d-8148-10308b91896c

  responses:
    BadRequest:
      description: The request was malformed or could not be processed.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            validation-error:
              $ref: '#/components/examples/validation-error'
            validation-errors:
              $ref: '#/components/examples/validation-errors'
    Unauthorized:
      description: The request is not authenticated.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            unauthorized:
              $ref: '#/components/examples/unauthorized'
    Forbidden:
      description: The request is authenticated but the user is not authorized.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            forbidden:
              $ref: '#/components/examples/forbidden'
    NotFound:
      description: The requested resource was not found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            not-found:
              $ref: '#/components/examples/not-found'
    UnexpectedError:
      description: An unexpected error occurred.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            unauthorized:
              $ref: '#/components/examples/unauthorized'
            forbidden:
              $ref: '#/components/examples/forbidden'
            not-found:
              $ref: '#/components/examples/not-found'
            server-error:
              $ref: '#/components/examples/server-error'

  examples:
    unauthorized:
      value:
        type: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.2
        status: 401
        title: Unauthorized
        detail: Access token not set or invalid. The requested resource could not be returned
        instance: GET /some/path
    forbidden:
      value:
        type: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.4
        status: 403
        title: Forbidden
        detail: The resource could not be returned as the requestor is not authorized
        instance: GET /some/path
    not-found:
      value:
        type: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.5
        status: 404
        title: Not found
        detail: The requested resource was not found
        instance: GET /some/path
    validation-error:
      description: Representation of a 400 Bad Request response where a required property was omitted.
      value:
        type: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.1
        status: 400
        title: Validation Error
        detail: Your request does not contain the required property 'name'
        instance: GET /some/path
        code: 400-02
    validation-errors:
      description: >
        This problem occurs when the request is deemed unprocessable.


        The client issued a request that failed validation. Certain validation libraries return multi-errors and cannot be easily parsed into discreet types. This problem type, afforded the provider with the ability to surface all validation errors and negate the need for a trial and error workflow on your side.
      value:
        type: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.1
        status: 400
        title: Validation Error
        detail: The request is invalid.
        instance: GET /some/path
        code: 400-02
        errors:
          - detail: Your request does not contain the required property {name}
            pointer: '#/name'
          - detail: The path parameter does not conform to the expected format
            header: resultId
    server-error:
      value:
        type: ahttps://datatracker.ietf.org/doc/html/rfc9110#section-15.6.1
        status: 500
        title: Server Error
        instance: GET /some/path
        detail: The server encountered an unexpected error

security:
  - oAuth:
      - tests:read
      - tests:write